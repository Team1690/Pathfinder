// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: pathfinder_service.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// utils
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{0}
}

func (x *Vector) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type RobotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType string  `protobuf:"bytes,1,opt,name=actionType,proto3" json:"actionType,omitempty"`
	Time       float32 `protobuf:"fixed32,2,opt,name=time,proto3" json:"time,omitempty"` // sec
}

func (x *RobotAction) Reset() {
	*x = RobotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotAction) ProtoMessage() {}

func (x *RobotAction) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotAction.ProtoReflect.Descriptor instead.
func (*RobotAction) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{1}
}

func (x *RobotAction) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *RobotAction) GetTime() float32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SplinePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point        *Vector `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	SegmentIndex int32   `protobuf:"varint,2,opt,name=segmentIndex,proto3" json:"segmentIndex,omitempty"`
}

func (x *SplinePoint) Reset() {
	*x = SplinePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplinePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplinePoint) ProtoMessage() {}

func (x *SplinePoint) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplinePoint.ProtoReflect.Descriptor instead.
func (*SplinePoint) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{2}
}

func (x *SplinePoint) GetPoint() *Vector {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *SplinePoint) GetSegmentIndex() int32 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

type SwerveRobotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width                         float32 `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height                        float32 `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	MaxVelocity                   float32 `protobuf:"fixed32,3,opt,name=maxVelocity,proto3" json:"maxVelocity,omitempty"`
	MaxAcceleration               float32 `protobuf:"fixed32,4,opt,name=maxAcceleration,proto3" json:"maxAcceleration,omitempty"`
	SkidAcceleration              float32 `protobuf:"fixed32,5,opt,name=skidAcceleration,proto3" json:"skidAcceleration,omitempty"`
	MaxJerk                       float32 `protobuf:"fixed32,6,opt,name=maxJerk,proto3" json:"maxJerk,omitempty"`
	CycleTime                     float32 `protobuf:"fixed32,7,opt,name=cycleTime,proto3" json:"cycleTime,omitempty"`
	AngularAccelerationPercentage float32 `protobuf:"fixed32,8,opt,name=angularAccelerationPercentage,proto3" json:"angularAccelerationPercentage,omitempty"` // the percentage of the angular acceleration when spreading heading over distance
}

func (x *SwerveRobotParams) Reset() {
	*x = SwerveRobotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwerveRobotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwerveRobotParams) ProtoMessage() {}

func (x *SwerveRobotParams) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwerveRobotParams.ProtoReflect.Descriptor instead.
func (*SwerveRobotParams) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{3}
}

func (x *SwerveRobotParams) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SwerveRobotParams) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SwerveRobotParams) GetMaxVelocity() float32 {
	if x != nil {
		return x.MaxVelocity
	}
	return 0
}

func (x *SwerveRobotParams) GetMaxAcceleration() float32 {
	if x != nil {
		return x.MaxAcceleration
	}
	return 0
}

func (x *SwerveRobotParams) GetSkidAcceleration() float32 {
	if x != nil {
		return x.SkidAcceleration
	}
	return 0
}

func (x *SwerveRobotParams) GetMaxJerk() float32 {
	if x != nil {
		return x.MaxJerk
	}
	return 0
}

func (x *SwerveRobotParams) GetCycleTime() float32 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

func (x *SwerveRobotParams) GetAngularAccelerationPercentage() float32 {
	if x != nil {
		return x.AngularAccelerationPercentage
	}
	return 0
}

type TankRobotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width           float32 `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height          float32 `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	MaxVelocity     float32 `protobuf:"fixed32,3,opt,name=maxVelocity,proto3" json:"maxVelocity,omitempty"`
	MaxAcceleration float32 `protobuf:"fixed32,4,opt,name=maxAcceleration,proto3" json:"maxAcceleration,omitempty"`
	MaxJerk         float32 `protobuf:"fixed32,5,opt,name=maxJerk,proto3" json:"maxJerk,omitempty"`
	CycleTime       float32 `protobuf:"fixed32,6,opt,name=cycleTime,proto3" json:"cycleTime,omitempty"`
}

func (x *TankRobotParams) Reset() {
	*x = TankRobotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankRobotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankRobotParams) ProtoMessage() {}

func (x *TankRobotParams) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankRobotParams.ProtoReflect.Descriptor instead.
func (*TankRobotParams) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{4}
}

func (x *TankRobotParams) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TankRobotParams) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TankRobotParams) GetMaxVelocity() float32 {
	if x != nil {
		return x.MaxVelocity
	}
	return 0
}

func (x *TankRobotParams) GetMaxAcceleration() float32 {
	if x != nil {
		return x.MaxAcceleration
	}
	return 0
}

func (x *TankRobotParams) GetMaxJerk() float32 {
	if x != nil {
		return x.MaxJerk
	}
	return 0
}

func (x *TankRobotParams) GetCycleTime() float32 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

type SwervePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwervePoints []*SwervePoints_SwervePoint `protobuf:"bytes,1,rep,name=swervePoints,proto3" json:"swervePoints,omitempty"`
}

func (x *SwervePoints) Reset() {
	*x = SwervePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwervePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwervePoints) ProtoMessage() {}

func (x *SwervePoints) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwervePoints.ProtoReflect.Descriptor instead.
func (*SwervePoints) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{5}
}

func (x *SwervePoints) GetSwervePoints() []*SwervePoints_SwervePoint {
	if x != nil {
		return x.SwervePoints
	}
	return nil
}

type TankPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TankPoints []*TankPoints_TankPoint `protobuf:"bytes,1,rep,name=tankPoints,proto3" json:"tankPoints,omitempty"`
}

func (x *TankPoints) Reset() {
	*x = TankPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankPoints) ProtoMessage() {}

func (x *TankPoints) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankPoints.ProtoReflect.Descriptor instead.
func (*TankPoints) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{6}
}

func (x *TankPoints) GetTankPoints() []*TankPoints_TankPoint {
	if x != nil {
		return x.TankPoints
	}
	return nil
}

// path definitions
type PathPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   *Vector      `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ControlIn  *Vector      `protobuf:"bytes,2,opt,name=controlIn,proto3" json:"controlIn,omitempty"`
	ControlOut *Vector      `protobuf:"bytes,3,opt,name=controlOut,proto3" json:"controlOut,omitempty"`
	UseHeading bool         `protobuf:"varint,4,opt,name=useHeading,proto3" json:"useHeading,omitempty"`
	Heading    float32      `protobuf:"fixed32,5,opt,name=heading,proto3" json:"heading,omitempty"`
	Action     *RobotAction `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PathPoint) Reset() {
	*x = PathPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPoint) ProtoMessage() {}

func (x *PathPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPoint.ProtoReflect.Descriptor instead.
func (*PathPoint) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{7}
}

func (x *PathPoint) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PathPoint) GetControlIn() *Vector {
	if x != nil {
		return x.ControlIn
	}
	return nil
}

func (x *PathPoint) GetControlOut() *Vector {
	if x != nil {
		return x.ControlOut
	}
	return nil
}

func (x *PathPoint) GetUseHeading() bool {
	if x != nil {
		return x.UseHeading
	}
	return false
}

func (x *PathPoint) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *PathPoint) GetAction() *RobotAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points      []*PathPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	MaxVelocity float32      `protobuf:"fixed32,2,opt,name=maxVelocity,proto3" json:"maxVelocity,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{8}
}

func (x *Segment) GetPoints() []*PathPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Segment) GetMaxVelocity() float32 {
	if x != nil {
		return x.MaxVelocity
	}
	return 0
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{9}
}

func (x *Section) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// trajectory
type TrajectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	// Types that are assignable to RobotParams:
	//
	//	*TrajectoryRequest_SwerveParams
	//	*TrajectoryRequest_TankParams
	RobotParams isTrajectoryRequest_RobotParams `protobuf_oneof:"robotParams"`
	FileName    string                          `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *TrajectoryRequest) Reset() {
	*x = TrajectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrajectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrajectoryRequest) ProtoMessage() {}

func (x *TrajectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrajectoryRequest.ProtoReflect.Descriptor instead.
func (*TrajectoryRequest) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{10}
}

func (x *TrajectoryRequest) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (m *TrajectoryRequest) GetRobotParams() isTrajectoryRequest_RobotParams {
	if m != nil {
		return m.RobotParams
	}
	return nil
}

func (x *TrajectoryRequest) GetSwerveParams() *SwerveRobotParams {
	if x, ok := x.GetRobotParams().(*TrajectoryRequest_SwerveParams); ok {
		return x.SwerveParams
	}
	return nil
}

func (x *TrajectoryRequest) GetTankParams() *TankRobotParams {
	if x, ok := x.GetRobotParams().(*TrajectoryRequest_TankParams); ok {
		return x.TankParams
	}
	return nil
}

func (x *TrajectoryRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type isTrajectoryRequest_RobotParams interface {
	isTrajectoryRequest_RobotParams()
}

type TrajectoryRequest_SwerveParams struct {
	SwerveParams *SwerveRobotParams `protobuf:"bytes,2,opt,name=swerveParams,proto3,oneof"`
}

type TrajectoryRequest_TankParams struct {
	TankParams *TankRobotParams `protobuf:"bytes,3,opt,name=tankParams,proto3,oneof"`
}

func (*TrajectoryRequest_SwerveParams) isTrajectoryRequest_RobotParams() {}

func (*TrajectoryRequest_TankParams) isTrajectoryRequest_RobotParams() {}

type TrajectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Points:
	//
	//	*TrajectoryResponse_SwervePoints
	//	*TrajectoryResponse_TankPoints
	Points isTrajectoryResponse_Points `protobuf_oneof:"points"`
}

func (x *TrajectoryResponse) Reset() {
	*x = TrajectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrajectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrajectoryResponse) ProtoMessage() {}

func (x *TrajectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrajectoryResponse.ProtoReflect.Descriptor instead.
func (*TrajectoryResponse) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{11}
}

func (m *TrajectoryResponse) GetPoints() isTrajectoryResponse_Points {
	if m != nil {
		return m.Points
	}
	return nil
}

func (x *TrajectoryResponse) GetSwervePoints() *SwervePoints {
	if x, ok := x.GetPoints().(*TrajectoryResponse_SwervePoints); ok {
		return x.SwervePoints
	}
	return nil
}

func (x *TrajectoryResponse) GetTankPoints() *TankPoints {
	if x, ok := x.GetPoints().(*TrajectoryResponse_TankPoints); ok {
		return x.TankPoints
	}
	return nil
}

type isTrajectoryResponse_Points interface {
	isTrajectoryResponse_Points()
}

type TrajectoryResponse_SwervePoints struct {
	SwervePoints *SwervePoints `protobuf:"bytes,1,opt,name=swervePoints,proto3,oneof"`
}

type TrajectoryResponse_TankPoints struct {
	TankPoints *TankPoints `protobuf:"bytes,2,opt,name=tankPoints,proto3,oneof"`
}

func (*TrajectoryResponse_SwervePoints) isTrajectoryResponse_Points() {}

func (*TrajectoryResponse_TankPoints) isTrajectoryResponse_Points() {}

// spline
type SplineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments      []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`             //segments because we want to color in by segment not by section
	PointInterval float32    `protobuf:"fixed32,2,opt,name=pointInterval,proto3" json:"pointInterval,omitempty"` // in meters
}

func (x *SplineRequest) Reset() {
	*x = SplineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplineRequest) ProtoMessage() {}

func (x *SplineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplineRequest.ProtoReflect.Descriptor instead.
func (*SplineRequest) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{12}
}

func (x *SplineRequest) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SplineRequest) GetPointInterval() float32 {
	if x != nil {
		return x.PointInterval
	}
	return 0
}

type SplineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplinePoints []*SplinePoint `protobuf:"bytes,1,rep,name=splinePoints,proto3" json:"splinePoints,omitempty"`
}

func (x *SplineResponse) Reset() {
	*x = SplineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplineResponse) ProtoMessage() {}

func (x *SplineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplineResponse.ProtoReflect.Descriptor instead.
func (*SplineResponse) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{13}
}

func (x *SplineResponse) GetSplinePoints() []*SplinePoint {
	if x != nil {
		return x.SplinePoints
	}
	return nil
}

// opt_path
type OptSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointIndexes []int32 `protobuf:"varint,1,rep,packed,name=pointIndexes,proto3" json:"pointIndexes,omitempty"`
	Speed        float32 `protobuf:"fixed32,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *OptSegment) Reset() {
	*x = OptSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptSegment) ProtoMessage() {}

func (x *OptSegment) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptSegment.ProtoReflect.Descriptor instead.
func (*OptSegment) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{14}
}

func (x *OptSegment) GetPointIndexes() []int32 {
	if x != nil {
		return x.PointIndexes
	}
	return nil
}

func (x *OptSegment) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type PathOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *PathModel `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Types that are assignable to RobotParams:
	//
	//	*PathOptimizationRequest_SwerveParams
	//	*PathOptimizationRequest_TankParams
	RobotParams isPathOptimizationRequest_RobotParams `protobuf_oneof:"RobotParams"`
}

func (x *PathOptimizationRequest) Reset() {
	*x = PathOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathOptimizationRequest) ProtoMessage() {}

func (x *PathOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathOptimizationRequest.ProtoReflect.Descriptor instead.
func (*PathOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{15}
}

func (x *PathOptimizationRequest) GetPath() *PathModel {
	if x != nil {
		return x.Path
	}
	return nil
}

func (m *PathOptimizationRequest) GetRobotParams() isPathOptimizationRequest_RobotParams {
	if m != nil {
		return m.RobotParams
	}
	return nil
}

func (x *PathOptimizationRequest) GetSwerveParams() *SwerveRobotParams {
	if x, ok := x.GetRobotParams().(*PathOptimizationRequest_SwerveParams); ok {
		return x.SwerveParams
	}
	return nil
}

func (x *PathOptimizationRequest) GetTankParams() *TankRobotParams {
	if x, ok := x.GetRobotParams().(*PathOptimizationRequest_TankParams); ok {
		return x.TankParams
	}
	return nil
}

type isPathOptimizationRequest_RobotParams interface {
	isPathOptimizationRequest_RobotParams()
}

type PathOptimizationRequest_SwerveParams struct {
	SwerveParams *SwerveRobotParams `protobuf:"bytes,2,opt,name=swerveParams,proto3,oneof"`
}

type PathOptimizationRequest_TankParams struct {
	TankParams *TankRobotParams `protobuf:"bytes,3,opt,name=tankParams,proto3,oneof"`
}

func (*PathOptimizationRequest_SwerveParams) isPathOptimizationRequest_RobotParams() {}

func (*PathOptimizationRequest_TankParams) isPathOptimizationRequest_RobotParams() {}

type PathModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathPoints []*PathPoint  `protobuf:"bytes,1,rep,name=pathPoints,proto3" json:"pathPoints,omitempty"`
	Segments   []*OptSegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *PathModel) Reset() {
	*x = PathModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathModel) ProtoMessage() {}

func (x *PathModel) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathModel.ProtoReflect.Descriptor instead.
func (*PathModel) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{16}
}

func (x *PathModel) GetPathPoints() []*PathPoint {
	if x != nil {
		return x.PathPoints
	}
	return nil
}

func (x *PathModel) GetSegments() []*OptSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type SwervePoints_SwervePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            float32 `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	Position        *Vector `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Velocity        *Vector `protobuf:"bytes,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Heading         float32 `protobuf:"fixed32,4,opt,name=heading,proto3" json:"heading,omitempty"`
	AngularVelocity float32 `protobuf:"fixed32,5,opt,name=angularVelocity,proto3" json:"angularVelocity,omitempty"`
	Action          string  `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *SwervePoints_SwervePoint) Reset() {
	*x = SwervePoints_SwervePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwervePoints_SwervePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwervePoints_SwervePoint) ProtoMessage() {}

func (x *SwervePoints_SwervePoint) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwervePoints_SwervePoint.ProtoReflect.Descriptor instead.
func (*SwervePoints_SwervePoint) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SwervePoints_SwervePoint) GetTime() float32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SwervePoints_SwervePoint) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SwervePoints_SwervePoint) GetVelocity() *Vector {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *SwervePoints_SwervePoint) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *SwervePoints_SwervePoint) GetAngularVelocity() float32 {
	if x != nil {
		return x.AngularVelocity
	}
	return 0
}

func (x *SwervePoints_SwervePoint) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type TankPoints_TankPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          float32 `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	Position      *Vector `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	RightVelocity float32 `protobuf:"fixed32,3,opt,name=rightVelocity,proto3" json:"rightVelocity,omitempty"`
	LeftVelocity  float32 `protobuf:"fixed32,4,opt,name=leftVelocity,proto3" json:"leftVelocity,omitempty"`
	Heading       float32 `protobuf:"fixed32,5,opt,name=heading,proto3" json:"heading,omitempty"`
	Action        string  `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *TankPoints_TankPoint) Reset() {
	*x = TankPoints_TankPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathfinder_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankPoints_TankPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankPoints_TankPoint) ProtoMessage() {}

func (x *TankPoints_TankPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pathfinder_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankPoints_TankPoint.ProtoReflect.Descriptor instead.
func (*TankPoints_TankPoint) Descriptor() ([]byte, []int) {
	return file_pathfinder_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TankPoints_TankPoint) GetTime() float32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TankPoints_TankPoint) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TankPoints_TankPoint) GetRightVelocity() float32 {
	if x != nil {
		return x.RightVelocity
	}
	return 0
}

func (x *TankPoints_TankPoint) GetLeftVelocity() float32 {
	if x != nil {
		return x.LeftVelocity
	}
	return 0
}

func (x *TankPoints_TankPoint) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *TankPoints_TankPoint) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

var File_pathfinder_service_proto protoreflect.FileDescriptor

var file_pathfinder_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x06, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x22, 0x41, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x64, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x73, 0x6b, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x4a, 0x65, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4a, 0x65, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1d, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xc3, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x4a, 0x65, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x4a, 0x65, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x77, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53,
	0x77, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x77, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x77, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xc7, 0x01, 0x0a, 0x0b, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x86, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x54, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x6e, 0x6b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x07, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x2f, 0x0a, 0x07,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd2, 0x01,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x77, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x77, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x6e,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x77, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x77, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x22, 0xb6, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0c,
	0x73, 0x77, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x77, 0x65, 0x72, 0x76, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x77, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x61, 0x6e,
	0x6b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x60, 0x0a, 0x09, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xc4, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x13, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x15,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2e, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pathfinder_service_proto_rawDescOnce sync.Once
	file_pathfinder_service_proto_rawDescData = file_pathfinder_service_proto_rawDesc
)

func file_pathfinder_service_proto_rawDescGZIP() []byte {
	file_pathfinder_service_proto_rawDescOnce.Do(func() {
		file_pathfinder_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pathfinder_service_proto_rawDescData)
	})
	return file_pathfinder_service_proto_rawDescData
}

var file_pathfinder_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_pathfinder_service_proto_goTypes = []any{
	(*Vector)(nil),                   // 0: Vector
	(*RobotAction)(nil),              // 1: RobotAction
	(*SplinePoint)(nil),              // 2: SplinePoint
	(*SwerveRobotParams)(nil),        // 3: SwerveRobotParams
	(*TankRobotParams)(nil),          // 4: TankRobotParams
	(*SwervePoints)(nil),             // 5: SwervePoints
	(*TankPoints)(nil),               // 6: TankPoints
	(*PathPoint)(nil),                // 7: PathPoint
	(*Segment)(nil),                  // 8: Segment
	(*Section)(nil),                  // 9: Section
	(*TrajectoryRequest)(nil),        // 10: TrajectoryRequest
	(*TrajectoryResponse)(nil),       // 11: TrajectoryResponse
	(*SplineRequest)(nil),            // 12: SplineRequest
	(*SplineResponse)(nil),           // 13: SplineResponse
	(*OptSegment)(nil),               // 14: OptSegment
	(*PathOptimizationRequest)(nil),  // 15: PathOptimizationRequest
	(*PathModel)(nil),                // 16: PathModel
	(*SwervePoints_SwervePoint)(nil), // 17: SwervePoints.SwervePoint
	(*TankPoints_TankPoint)(nil),     // 18: TankPoints.TankPoint
}
var file_pathfinder_service_proto_depIdxs = []int32{
	0,  // 0: SplinePoint.point:type_name -> Vector
	17, // 1: SwervePoints.swervePoints:type_name -> SwervePoints.SwervePoint
	18, // 2: TankPoints.tankPoints:type_name -> TankPoints.TankPoint
	0,  // 3: PathPoint.position:type_name -> Vector
	0,  // 4: PathPoint.controlIn:type_name -> Vector
	0,  // 5: PathPoint.controlOut:type_name -> Vector
	1,  // 6: PathPoint.action:type_name -> RobotAction
	7,  // 7: Segment.points:type_name -> PathPoint
	8,  // 8: Section.segments:type_name -> Segment
	9,  // 9: TrajectoryRequest.sections:type_name -> Section
	3,  // 10: TrajectoryRequest.swerveParams:type_name -> SwerveRobotParams
	4,  // 11: TrajectoryRequest.tankParams:type_name -> TankRobotParams
	5,  // 12: TrajectoryResponse.swervePoints:type_name -> SwervePoints
	6,  // 13: TrajectoryResponse.tankPoints:type_name -> TankPoints
	8,  // 14: SplineRequest.segments:type_name -> Segment
	2,  // 15: SplineResponse.splinePoints:type_name -> SplinePoint
	16, // 16: PathOptimizationRequest.path:type_name -> PathModel
	3,  // 17: PathOptimizationRequest.swerveParams:type_name -> SwerveRobotParams
	4,  // 18: PathOptimizationRequest.tankParams:type_name -> TankRobotParams
	7,  // 19: PathModel.pathPoints:type_name -> PathPoint
	14, // 20: PathModel.segments:type_name -> OptSegment
	0,  // 21: SwervePoints.SwervePoint.position:type_name -> Vector
	0,  // 22: SwervePoints.SwervePoint.velocity:type_name -> Vector
	0,  // 23: TankPoints.TankPoint.position:type_name -> Vector
	10, // 24: PathFinder.CalculateTrajectory:input_type -> TrajectoryRequest
	12, // 25: PathFinder.CalculateSplinePoints:input_type -> SplineRequest
	15, // 26: PathFinder.OptimizePath:input_type -> PathOptimizationRequest
	11, // 27: PathFinder.CalculateTrajectory:output_type -> TrajectoryResponse
	13, // 28: PathFinder.CalculateSplinePoints:output_type -> SplineResponse
	16, // 29: PathFinder.OptimizePath:output_type -> PathModel
	27, // [27:30] is the sub-list for method output_type
	24, // [24:27] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pathfinder_service_proto_init() }
func file_pathfinder_service_proto_init() {
	if File_pathfinder_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pathfinder_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RobotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SplinePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SwerveRobotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TankRobotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SwervePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TankPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PathPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TrajectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TrajectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SplineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SplineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OptSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PathOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PathModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SwervePoints_SwervePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathfinder_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TankPoints_TankPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pathfinder_service_proto_msgTypes[10].OneofWrappers = []any{
		(*TrajectoryRequest_SwerveParams)(nil),
		(*TrajectoryRequest_TankParams)(nil),
	}
	file_pathfinder_service_proto_msgTypes[11].OneofWrappers = []any{
		(*TrajectoryResponse_SwervePoints)(nil),
		(*TrajectoryResponse_TankPoints)(nil),
	}
	file_pathfinder_service_proto_msgTypes[15].OneofWrappers = []any{
		(*PathOptimizationRequest_SwerveParams)(nil),
		(*PathOptimizationRequest_TankParams)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pathfinder_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pathfinder_service_proto_goTypes,
		DependencyIndexes: file_pathfinder_service_proto_depIdxs,
		MessageInfos:      file_pathfinder_service_proto_msgTypes,
	}.Build()
	File_pathfinder_service_proto = out.File
	file_pathfinder_service_proto_rawDesc = nil
	file_pathfinder_service_proto_goTypes = nil
	file_pathfinder_service_proto_depIdxs = nil
}
